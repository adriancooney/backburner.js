{"version":3,"file":"tests.js","sources":["../tests/autorun-test.ts","../tests/bb-has-timers-test.ts","../tests/cancel-test.ts","../tests/configurable-timeout-test.ts","../tests/debounce-test.ts","../tests/debug-test.ts","../tests/defer-iterable-test.ts","../tests/defer-once-test.ts","../tests/defer-test.ts","../tests/events-test.ts","../tests/join-test.ts","../tests/multi-turn-test.ts","../tests/queue-push-unique-test.ts","../tests/queue-test.ts","../tests/run-test.ts","../tests/set-timeout-test.ts","../tests/throttle-test.ts"],"sourcesContent":["import Backburner from 'backburner';\n\nQUnit.module('tests/autorun');\n\nQUnit.test('autorun', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n\n  assert.ok(!bb.currentInstance, 'The DeferredActionQueues object is lazily instaniated');\n  assert.equal(step++, 0);\n\n  bb.schedule('zomg', null, () => {\n    assert.equal(step++, 2);\n    setTimeout(() => {\n      assert.ok(!bb.hasTimers(), 'The all timers are cleared');\n      done();\n    });\n  });\n\n  assert.ok(bb.currentInstance, 'The DeferredActionQueues object exists');\n  assert.equal(step++, 1);\n});\n\nQUnit.test('autorun (joins next run if not yet flushed)', function(assert) {\n  let bb = new Backburner(['zomg']);\n  let order = -1;\n\n  let tasks = {\n    one: { count: 0, order: -1 },\n    two: { count: 0, order: -1 }\n  };\n\n  bb.schedule('zomg', null, () => {\n    tasks.one.count++;\n    tasks.one.order = ++order;\n  });\n\n  assert.deepEqual(tasks, {\n    one: { count: 0, order: -1 },\n    two: { count: 0, order: -1 }\n  });\n\n  bb.run(() => {\n    bb.schedule('zomg', null, () => {\n      tasks.two.count++;\n      tasks.two.order = ++order;\n    });\n\n    assert.deepEqual(tasks, {\n      one: { count: 0, order: -1 },\n      two: { count: 0, order: -1 }\n    });\n  });\n\n  assert.deepEqual(tasks, {\n    one: { count: 1, order: 0 },\n    two: { count: 1, order: 1 }\n  });\n});\n\nQUnit.test('autorun completes before items scheduled by later (via microtasks)', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['first', 'second']);\n  let order = new Array();\n\n  // this later will be scheduled into the `first` queue when\n  // its timer is up\n  bb.later(() => {\n    order.push('second - later');\n  }, 0);\n\n  // scheduling this into the second queue so that we can confirm this _still_\n  // runs first (due to autorun resolving before scheduled timer)\n  bb.schedule('second', null, () => {\n    order.push('first - scheduled');\n  });\n\n  setTimeout(() => {\n    assert.deepEqual(order, ['first - scheduled', 'second - later']);\n    done();\n  }, 20);\n});\n\nQUnit.test('can be canceled (private API)', function(assert) {\n  assert.expect(0);\n\n  let done = assert.async();\n  let bb = new Backburner(['zomg']);\n\n  bb.schedule('zomg', null, () => {\n    assert.notOk(true, 'should not flush');\n  });\n\n  bb['_cancelAutorun']();\n\n  setTimeout(done, 10);\n});\n\nQUnit.test('autorun interleaved with microtasks do not get dropped [GH#332]', function(assert) {\n  let done = assert.async();\n  let actual: string[] = [];\n  let bb = new Backburner(['actions', 'render']);\n\n  bb.schedule('render', function() {\n    actual.push('first');\n    bb.schedule('actions', () => {\n      actual.push('action1');\n    });\n\n    Promise.resolve().then(() => {\n      actual.push('second');\n      bb.schedule('actions', () => {\n        actual.push('action2');\n      });\n\n      return Promise.resolve().then(() => {\n        actual.push('third');\n\n        bb.schedule('actions', () => {\n          actual.push('action3');\n        });\n      });\n    });\n  });\n\n  setTimeout(function() {\n    assert.deepEqual(actual, ['first', 'action1', 'second', 'action2', 'third', 'action3']);\n\n    done();\n  });\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/bb-has-timers');\n\nQUnit.test('hasTimers', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['ohai']);\n  let timer;\n  let target = {\n    fn() { }\n  };\n\n  bb.schedule('ohai', null, () => {\n    assert.ok(!bb.hasTimers(), 'Initially there are no timers');\n\n    timer = bb.later('ohai', () => {});\n    assert.ok(bb.hasTimers(), 'hasTimers checks timers');\n\n    bb.cancel(timer);\n    assert.ok(!bb.hasTimers(), 'Timers are cleared');\n\n    timer = bb.debounce(target, 'fn', 200);\n    assert.ok(bb.hasTimers(), 'hasTimers checks debouncees');\n\n    bb.cancel(timer);\n    assert.ok(!bb.hasTimers(), 'Timers are cleared');\n\n    timer = bb.throttle(target, 'fn', 200);\n    assert.ok(bb.hasTimers(), 'hasTimers checks throttlers');\n\n    bb.cancel(timer);\n    assert.ok(!bb.hasTimers(), 'Timers are cleared');\n\n    done();\n  });\n});\n","\nimport Backburner from 'backburner';\n\nQUnit.module('tests/cancel');\n\nQUnit.test('scheduleOnce', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('one', () => functionWasCalled = true);\n\n    assert.ok(timer, 'Timer object was returned');\n    assert.ok(bb.cancel(timer), 'Cancel returned true');\n    assert.ok(!functionWasCalled, 'function was not called');\n  });\n});\n\nQUnit.test('setTimeout', function(assert) {\n  assert.expect(5);\n  let done = assert.async();\n\n  let called = false;\n  let bb = new Backburner(['one'], {\n    onBegin() {\n      called = true;\n    }\n  });\n\n  let functionWasCalled = false;\n  let timer = bb.later(() => functionWasCalled = true);\n\n  assert.ok(timer, 'Timer object was returned');\n  assert.ok(bb.cancel(timer), 'Cancel returned true');\n  assert.ok(!called, 'onBegin was not called');\n\n  setTimeout(() => {\n    assert.ok(!functionWasCalled, 'function was not called');\n    assert.ok(!called, 'onBegin was not called');\n    done();\n  }, 0);\n});\n\nQUnit.test('setTimeout with multiple pending', function(assert) {\n  assert.expect(7);\n\n  let done = assert.async();\n  let called = false;\n  let bb = new Backburner(['one'], {\n    onBegin() {\n      called = true;\n    }\n  });\n  let function1WasCalled = false;\n  let function2WasCalled = false;\n\n  let timer1 = bb.later(() => function1WasCalled = true);\n  let timer2 = bb.later(() => function2WasCalled = true);\n\n  assert.ok(timer1, 'Timer object 2 was returned');\n  assert.ok(bb.cancel(timer1), 'Cancel for timer 1 returned true');\n  assert.ok(timer2, 'Timer object 2 was returned');\n  assert.ok(!called, 'onBegin was not called');\n\n  setTimeout(() => {\n    assert.ok(!function1WasCalled, 'function 1 was not called');\n    assert.ok(function2WasCalled, 'function 2 was called');\n    assert.ok(called, 'onBegin was called');\n\n    done();\n  }, 10);\n});\n\nQUnit.test('setTimeout and creating a new later', function(assert) {\n  assert.expect(7);\n  let done = assert.async();\n  let called = false;\n  let bb = new Backburner(['one'], {\n    onBegin() {\n      called = true;\n    }\n  });\n  let function1WasCalled = false;\n  let function2WasCalled = false;\n\n  let timer1 = bb.later(() => function1WasCalled = true, 0);\n\n  assert.ok(timer1, 'Timer object 2 was returned');\n  assert.ok(bb.cancel(timer1), 'Cancel for timer 1 returned true');\n\n  let timer2 = bb.later(() => function2WasCalled = true, 1);\n\n  assert.ok(timer2, 'Timer object 2 was returned');\n  assert.ok(!called, 'onBegin was not called');\n\n  setTimeout(() => {\n    assert.ok(!function1WasCalled, 'function 1 was not called');\n    assert.ok(function2WasCalled, 'function 2 was called');\n    assert.ok(called, 'onBegin was called');\n    done();\n  }, 50);\n});\n\nQUnit.test('cancelTimers', function(assert) {\n  assert.expect(8);\n  let done = assert.async();\n\n  let bb = new Backburner(['one']);\n  let laterWasCalled = false;\n  let debounceWasCalled = false;\n  let throttleWasCalled = false;\n\n  let timer1 = bb.later(() => laterWasCalled = true, 0);\n  let timer2 = bb.debounce(() => debounceWasCalled = true, 0);\n  let timer3 = bb.throttle(() => throttleWasCalled = true, 0, false);\n\n  assert.ok(timer1, 'Timer object was returned');\n  assert.ok(timer2, 'Timer object was returned');\n  assert.ok(timer3, 'Timer object was returned');\n  assert.ok(bb.hasTimers(), 'bb has scheduled timer');\n\n  bb.cancelTimers();\n\n  setTimeout(function() {\n    assert.ok(!bb.hasTimers(), 'bb has no scheduled timer');\n    assert.ok(!laterWasCalled, 'later function was not called');\n    assert.ok(!debounceWasCalled, 'debounce function was not called');\n    assert.ok(!throttleWasCalled, 'throttle function was not called');\n    done();\n  }, 100);\n});\n\nQUnit.test('cancel during flush', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    let timer1 = bb.scheduleOnce('one', () => bb.cancel(timer2));\n    let timer2 = bb.scheduleOnce('one', () => functionWasCalled = true);\n  });\n\n  assert.ok(!functionWasCalled, 'function was not called');\n});\n\nQUnit.test('with target', function(assert) {\n  assert.expect(3);\n\n  let obj = {\n    ___FOO___: 1\n  };\n\n  let bb = new Backburner(['action']);\n\n  let wasCalled = 0;\n\n  function fn() {\n    wasCalled++;\n  }\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n\n    bb.cancel(timer);\n    bb.scheduleOnce('action', obj, fn);\n\n    assert.equal(wasCalled, 0);\n  });\n\n  assert.equal(wasCalled, 1);\n});\n\nQUnit.test('no target', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['action']);\n\n  let wasCalled = 0;\n\n  function fn() {\n    wasCalled++;\n  }\n\n  bb.run(() => {\n    let timer = bb.scheduleOnce('action', fn);\n\n    assert.equal(wasCalled, 0);\n\n    bb.cancel(timer);\n    bb.scheduleOnce('action', fn);\n\n    assert.equal(wasCalled, 0);\n  });\n\n  assert.equal(wasCalled, 1);\n});\n\nQUnit.test('cancel always returns boolean', function(assert) {\n  let bb = new Backburner(['one']);\n\n  bb.run(function() {\n    let timer1 = bb.schedule('one', null, function() {});\n    assert.equal(bb.cancel(timer1), true);\n    assert.equal(bb.cancel(timer1), false);\n    assert.equal(bb.cancel(timer1), false);\n\n    let timer2 = bb.later(function() {}, 10);\n    assert.equal(bb.cancel(timer2), true);\n    assert.equal(bb.cancel(timer2), false);\n    assert.equal(bb.cancel(timer2), false);\n\n    let timer3 = bb.debounce(function() {}, 10);\n    assert.equal(bb.cancel(timer3), true);\n    assert.equal(bb.cancel(timer3), false);\n    assert.equal(bb.cancel(timer3), false);\n\n    assert.equal(bb.cancel(undefined), false);\n    assert.equal(bb.cancel(null), false);\n    assert.equal(bb.cancel({}), false);\n    assert.equal(bb.cancel([]), false);\n    assert.equal(bb.cancel(42), false);\n    assert.equal(bb.cancel('42'), false);\n  });\n});\n","import Backburner, { buildPlatform } from 'backburner';\n\nQUnit.module('tests/configurable-timeout');\n\nQUnit.test('We can configure a custom platform', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one'], {\n    _buildPlatform(flush) {\n      let platform = buildPlatform(flush);\n      platform['isFakePlatform'] = true;\n      return platform;\n    }\n  });\n\n  assert.ok(bb['_platform']!['isFakePlatform'], 'We can pass in a custom platform');\n});\n\nQUnit.test('We can use a custom setTimeout', function(assert) {\n  assert.expect(1);\n  let done = assert.async();\n\n  let customNextWasUsed = false;\n  let bb = new Backburner(['one'], {\n    _buildPlatform(flush) {\n      return {\n        next() {\n          throw new TypeError('NOT IMPLEMENTED');\n        },\n        clearNext() { },\n        setTimeout(cb) {\n          customNextWasUsed = true;\n          return setTimeout(cb);\n        },\n        clearTimeout(timer) {\n          return clearTimeout(timer);\n        },\n        now() {\n          return Date.now();\n        },\n        isFakePlatform: true\n      };\n    }\n  });\n\n  bb.setTimeout(() => {\n    assert.ok(customNextWasUsed , 'custom later was used');\n    done();\n  });\n});\n\nQUnit.test('We can use a custom next', function(assert) {\n  assert.expect(1);\n  let done = assert.async();\n\n  let customNextWasUsed = false;\n  let bb = new Backburner(['one'], {\n    _buildPlatform(flush) {\n      return {\n        setTimeout() {\n          throw new TypeError('NOT IMPLEMENTED');\n        },\n        clearTimeout(timer) {\n          return clearTimeout(timer);\n        },\n        next() {\n          // next is used for the autorun\n          customNextWasUsed = true;\n          return setTimeout(flush);\n        },\n        clearNext() { },\n        now() { return Date.now(); },\n        isFakePlatform: true\n      };\n    }\n  });\n\n  bb.scheduleOnce('one', () => {\n    assert.ok(customNextWasUsed , 'custom later was used');\n    done();\n  });\n});\n\nQUnit.test('We can use a custom clearTimeout', function(assert) {\n  assert.expect(2);\n\n  let functionWasCalled = false;\n  let customClearTimeoutWasUsed = false;\n  let bb = new Backburner(['one'], {\n    _buildPlatform(flush) {\n      return {\n        setTimeout(method, wait) {\n          return setTimeout(method, wait);\n        },\n        clearTimeout(timer) {\n          customClearTimeoutWasUsed = true;\n          return clearTimeout(timer);\n        },\n        next() {\n          return setTimeout(flush, 0);\n        },\n        clearNext(timer) {\n          customClearTimeoutWasUsed = true;\n          return clearTimeout(timer);\n        },\n        now() {\n          return Date.now();\n        }\n      };\n    }\n  });\n\n  bb.scheduleOnce('one', () => functionWasCalled = true);\n  bb.cancelTimers();\n\n  bb.run(() => {\n    bb.scheduleOnce('one', () => {\n      assert.ok(!functionWasCalled, 'function was not called');\n      assert.ok(customClearTimeoutWasUsed, 'custom clearTimeout was used');\n    });\n  });\n});\n\nQUnit.test('We can use a custom now', function(assert) {\n  assert.expect(1);\n  let done = assert.async();\n\n  let currentTime = 10;\n  let customNowWasUsed = false;\n  let bb = new Backburner(['one'], {\n    _buildPlatform(flush) {\n      return {\n        setTimeout(method, wait) {\n          return setTimeout(method, wait);\n        },\n        clearTimeout(id) {\n          clearTimeout(id);\n        },\n        next() {\n          return setTimeout(flush, 0);\n        },\n        clearNext() { },\n        now() {\n          customNowWasUsed = true;\n          return currentTime += 10;\n        },\n      };\n    }\n  });\n\n  bb.later(() => {\n    assert.ok(customNowWasUsed , 'custom now was used');\n    done();\n  }, 10);\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/debounce');\n\nQUnit.test('debounce', function(assert) {\n  assert.expect(14);\n\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n  let done = assert.async();\n\n  let wasCalled = false;\n  function debouncee() {\n    assert.ok(!wasCalled);\n    wasCalled = true;\n  }\n\n  // let's debounce the function `debouncee` for 40ms\n  // it will be executed 40ms after\n  bb.debounce(null, debouncee, 40);\n  assert.equal(step++, 0);\n\n  // let's schedule `debouncee` to run in 10ms\n  setTimeout(() => {\n    assert.equal(step++, 1);\n    assert.ok(!wasCalled, '@10ms, should not yet have been called');\n    bb.debounce(null, debouncee, 40);\n  }, 10);\n\n  // let's schedule `debouncee` to run again in 30ms\n  setTimeout(() => {\n    assert.equal(step++, 2);\n    assert.ok(!wasCalled, '@ 30ms, should not yet have been called');\n    bb.debounce(null, debouncee, 40);\n  }, 30);\n\n  // let's schedule `debouncee` to run yet again in 60ms\n  setTimeout(() => {\n    assert.equal(step++, 3);\n    assert.ok(!wasCalled, '@ 60ms, should not yet have been called');\n    bb.debounce(null, debouncee, 40);\n  }, 60);\n\n  // now, let's schedule an assertion to occur at 110ms,\n  // 10ms after `debouncee` has been called the last time\n  setTimeout(() => {\n    assert.equal(step++, 4);\n    assert.ok(wasCalled, '@ 110ms should have been called');\n  }, 110);\n\n  // great, we've made it this far, there's one more thing\n  // we need to test. we want to make sure we can call `debounce`\n  // again with the same target/method after it has executed\n\n  // at the 120ms mark, let's schedule another call to `debounce`\n  setTimeout(() => {\n    wasCalled = false; // reset the flag\n\n    // assert call order\n    assert.equal(step++, 5);\n\n    // call debounce for the second time\n    bb.debounce(null, debouncee, 100);\n\n    // assert that it is called in the future and not blackholed\n    setTimeout(() => {\n      assert.equal(step++, 6);\n      assert.ok(wasCalled, 'Another debounce call with the same function can be executed later');\n      done();\n    }, 230);\n  }, 120);\n});\n\nQUnit.test('debounce - immediate', function(assert) {\n  assert.expect(16);\n\n  let done = assert.async();\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n\n  let wasCalled = false;\n  function debouncee() {\n    assert.ok(!wasCalled);\n    wasCalled = true;\n  }\n\n  // let's debounce the function `debouncee` for 40ms\n  // it will be executed immediately, and prevent\n  // any actions for 40ms after\n  bb.debounce(null, debouncee, 40, true);\n  assert.equal(step++, 0);\n  assert.ok(wasCalled);\n  wasCalled = false;\n\n  // let's schedule `debouncee` to run in 10ms\n  setTimeout(() => {\n    assert.equal(step++, 1);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40, true);\n  }, 10);\n\n  // let's schedule `debouncee` to run again in 30ms\n  setTimeout(() => {\n    assert.equal(step++, 2);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40, true);\n  }, 30);\n\n  // let's schedule `debouncee` to run yet again in 60ms\n  setTimeout(() => {\n    assert.equal(step++, 3);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, 40, true);\n  }, 60);\n\n  // now, let's schedule an assertion to occur at 110ms,\n  // 10ms after `debouncee` has been called the last time\n  setTimeout(() => {\n    assert.equal(step++, 4);\n    assert.ok(!wasCalled);\n  }, 110);\n\n  // great, we've made it this far, there's one more thing\n  // we need to QUnit.test. we want to make sure we can call `debounce`\n  // again with the same target/method after it has executed\n\n  // at the 120ms mark, let's schedule another call to `debounce`\n  setTimeout(() => {\n    wasCalled = false; // reset the flag\n\n    // assert call order\n    assert.equal(step++, 5);\n\n    // call debounce for the second time\n    bb.debounce(null, debouncee, 100, true);\n    assert.ok(wasCalled, 'Another debounce call with the same function can be executed later');\n    wasCalled = false;\n\n    // assert that it is called in the future and not blackholed\n    setTimeout(() => {\n      assert.equal(step++, 6);\n      assert.ok(!wasCalled);\n      done();\n    }, 230);\n  }, 120);\n});\n\nQUnit.test('debounce + immediate joins existing run loop instances', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    throw error;\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.run(() => {\n    let parentInstance = bb.currentInstance;\n    bb.debounce(null, () => {\n      assert.equal(bb.currentInstance, parentInstance);\n    }, 20, true);\n  });\n});\n\nQUnit.test('debounce accept time interval like string numbers', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n  let wasCalled = false;\n\n  function debouncee() {\n    assert.ok(!wasCalled);\n    wasCalled = true;\n  }\n\n  bb.debounce(null, debouncee, '40');\n  assert.equal(step++, 0);\n\n  setTimeout(() => {\n    assert.equal(step++, 1);\n    assert.ok(!wasCalled);\n    bb.debounce(null, debouncee, '40');\n  }, 10);\n\n  setTimeout(() => {\n    assert.equal(step++, 2);\n    assert.ok(wasCalled);\n    done();\n  }, 60);\n});\n\nQUnit.test('debounce returns timer information usable for canceling', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let wasCalled = false;\n\n  function debouncee() {\n    assert.ok(false, 'this method shouldn\\'t be called');\n    wasCalled = true;\n  }\n\n  let timer = bb.debounce(null, debouncee, 1);\n\n  assert.ok(bb.cancel(timer), 'the timer is cancelled');\n\n  // should return false second time around\n  assert.ok(!bb.cancel(timer), 'the timer no longer exists in the list');\n\n  setTimeout(() => {\n    assert.ok(!wasCalled, 'the timer wasn\\'t called after waiting');\n    done();\n  }, 60);\n});\n\nQUnit.test('debounce cancelled after it\\'s executed returns false', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['darkknight']);\n  let wasCalled = false;\n\n  function debouncee() {\n    assert.ok(true, 'the debounced method was called');\n    wasCalled = true;\n  }\n\n  let timer = bb.debounce(null, debouncee, 1);\n\n  setTimeout(() => {\n    assert.ok(!bb.cancel(timer), 'no timer existed to cancel');\n    assert.ok(wasCalled, 'the timer was actually called');\n    done();\n  }, 10);\n\n});\n\nQUnit.test('debounced function is called with final argument', function(assert) {\n  assert.expect(1);\n\n  let done = assert.async();\n  let bb = new Backburner(['joker']);\n\n  function debouncee(arg) {\n    assert.equal('bus', arg, 'the debounced is called with right argument');\n    done();\n  }\n\n  bb.debounce(null, debouncee, 'car', 10);\n  bb.debounce(null, debouncee, 'bicycle', 10);\n  bb.debounce(null, debouncee, 'bus', 10);\n});\n\nQUnit.test('debounce cancelled doesn\\'t cancel older items', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['robin']);\n  let wasCalled = false;\n  let done = assert.async();\n\n  function debouncee() {\n    assert.ok(true, 'the debounced method was called');\n    if (wasCalled) {\n      done();\n    }\n    wasCalled = true;\n  }\n\n  let timer = bb.debounce(null, debouncee, 1);\n\n  setTimeout(() => {\n    bb.debounce(null, debouncee, 1);\n    assert.ok(!bb.cancel(timer), 'the second timer isn\\'t removed, despite appearing to be the same');\n    assert.ok(wasCalled, 'the timer was actually called');\n  }, 10);\n});\n\nQUnit.test('debounce that is immediate, and cancelled and called again happens immediately', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['robin']);\n  let calledCount = 0;\n\n  function debouncee() {\n    calledCount++;\n  }\n\n  let timer = bb.debounce(null, debouncee, 1000, true);\n\n  setTimeout(() => { // 10 millisecond delay\n    assert.equal(1, calledCount, 'debounced method was called');\n    assert.ok(bb.cancel(timer), 'debounced delay was cancelled');\n    bb.debounce(null, debouncee, 1000, true);\n\n    setTimeout(() => { // 10 millisecond delay\n      assert.equal(2, calledCount, 'debounced method was called again immediately');\n      done();\n    }, 10);\n  }, 10);\n\n});\n\nQUnit.test('debounce without a target, without args', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith = new Array();\n  function debouncee(...args) {\n    calledCount++;\n    calledWith.push(args);\n  }\n\n  bb.debounce(debouncee, 10);\n  bb.debounce(debouncee, 10);\n  bb.debounce(debouncee, 10);\n  assert.equal(calledCount, 0, 'debounced method was not called immediately');\n\n  setTimeout(() => {\n    assert.equal(calledCount, 0, 'debounced method was not called on next tick');\n  }, 0);\n\n  setTimeout(() => {\n    assert.equal(calledCount, 1, 'debounced method was was only called once');\n    assert.deepEqual(calledWith, [ [] ], 'debounce called once without arguments');\n    done();\n  }, 20);\n});\n\nQUnit.test('debounce without a target, without args - can be canceled', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  function debouncee() {\n    calledCount++;\n  }\n\n  bb.debounce(debouncee, 10);\n  bb.debounce(debouncee, 10);\n  let timer = bb.debounce(debouncee, 10);\n  assert.equal(calledCount, 0, 'debounced method was not called immediately');\n\n  setTimeout(() => {\n    bb.cancel(timer);\n    assert.equal(calledCount, 0, 'debounced method was not called on next tick');\n  }, 0);\n\n  setTimeout(() => {\n    assert.equal(calledCount, 0, 'debounced method was canceled properly');\n    done();\n  }, 20);\n});\n\nQUnit.test('debounce without a target, without args, immediate', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith = new Array();\n  function debouncee(...args) {\n    calledCount++;\n    calledWith.push(args);\n  }\n\n  bb.debounce(debouncee, 10, true);\n  bb.debounce(debouncee, 10, true);\n  bb.debounce(debouncee, 10, true);\n  assert.equal(calledCount, 1, 'debounced method was called immediately');\n  assert.deepEqual(calledWith, [ [] ], 'debounce method was called with the correct arguments');\n\n  setTimeout(() => {\n    bb.debounce(debouncee, 10, true);\n    assert.equal(calledCount, 1, 'debounced method was not called again within the time window');\n  }, 0);\n\n  setTimeout(() => {\n    assert.equal(calledCount, 1, 'debounced method was was only called once');\n    done();\n  }, 20);\n});\n\nQUnit.test('debounce without a target, without args, immediate - can be canceled', function(assert) {\n  let bb = new Backburner(['batman']);\n\n  let fooCalledCount = 0;\n  let barCalledCount = 0;\n  function foo() {\n    fooCalledCount++;\n  }\n  function bar() {\n    barCalledCount++;\n  }\n\n  bb.debounce(foo, 10, true);\n  bb.debounce(foo, 10, true);\n  assert.equal(fooCalledCount, 1, 'foo was called immediately, then debounced');\n\n  bb.debounce(bar, 10, true);\n  let timer = bb.debounce(bar, 10, true);\n  assert.equal(barCalledCount, 1, 'bar was called immediately, then debounced');\n\n  bb.cancel(timer);\n  bb.debounce(bar, 10, true);\n  assert.equal(barCalledCount, 2, 'after canceling the prior debounce, bar was called again');\n});\n\nQUnit.test('debounce without a target, with args', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith: string[] = [];\n  function debouncee(first) {\n    calledCount++;\n    calledWith.push(first);\n  }\n\n  let foo = { isFoo: true };\n  let bar = { isBar: true };\n  let baz = { isBaz: true };\n  bb.debounce(debouncee, foo, 10);\n  bb.debounce(debouncee, bar, 10);\n  bb.debounce(debouncee, baz, 10);\n  assert.equal(calledCount, 0, 'debounced method was not called immediately');\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [{ isBaz: true }], 'debounce method was only called once, with correct argument');\n    done();\n  }, 20);\n});\n\nQUnit.test('debounce without a target, with args - can be canceled', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith: string[] = [];\n  function debouncee(first) {\n    calledCount++;\n    calledWith.push(first);\n  }\n\n  let foo = { isFoo: true };\n  let bar = { isBar: true };\n  let baz = { isBaz: true };\n  bb.debounce(debouncee, foo, 10);\n  bb.debounce(debouncee, bar, 10);\n  let timer = bb.debounce(debouncee, baz, 10);\n  assert.equal(calledCount, 0, 'debounced method was not called immediately');\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [], 'debounce method has not been called on next tick');\n    bb.cancel(timer);\n  }, 0);\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [], 'debounce method is not called when canceled');\n    done();\n  }, 20);\n});\n\nQUnit.test('debounce without a target, with args, immediate', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith = new Array();\n  function debouncee(first) {\n    calledCount++;\n    calledWith.push(first);\n  }\n\n  let foo = { isFoo: true };\n  let bar = { isBar: true };\n  let baz = { isBaz: true };\n  let qux = { isQux: true };\n  bb.debounce(debouncee, foo, 10, true);\n  bb.debounce(debouncee, bar, 10, true);\n  bb.debounce(debouncee, baz, 10, true);\n\n  assert.deepEqual(calledWith, [{ isFoo: true }], 'debounce method was only called once, with correct argument');\n\n  setTimeout(() => {\n    bb.debounce(debouncee, qux, 10, true);\n    assert.deepEqual(calledWith, [{ isFoo: true }], 'debounce method was only called once, with correct argument');\n  }, 0);\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [{ isFoo: true }], 'debounce method was only called once, with correct argument');\n    done();\n  }, 20);\n});\n\nQUnit.test('debounce without a target, with args, immediate - can be canceled', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith: string[] = [];\n  function debouncee(first) {\n    calledCount++;\n    calledWith.push(first);\n  }\n\n  let foo = { isFoo: true };\n  let bar = { isBar: true };\n  let baz = { isBaz: true };\n  let qux = { isQux: true };\n  bb.debounce(debouncee, foo, 10, true);\n  bb.debounce(debouncee, bar, 10, true);\n  let timer = bb.debounce(debouncee, baz, 10, true);\n\n  assert.deepEqual(calledWith, [{ isFoo: true }], 'debounce method was only called once, with correct argument');\n\n  setTimeout(() => {\n    bb.cancel(timer);\n    bb.debounce(debouncee, qux, 10, true);\n    assert.deepEqual(calledWith, [{ isFoo: true }, { isQux: true }], 'debounce method was called again after canceling prior timer');\n  }, 0);\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [{ isFoo: true }, { isQux: true }], 'debounce method was not called again');\n    done();\n  }, 20);\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  let done = assert.async();\n\n  function onError(error) {\n    assert.equal('QUnit.test error', error.message);\n    done();\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError\n  });\n\n  bb.debounce(null, () => { throw new Error('QUnit.test error'); }, 20);\n});\n\nQUnit.test('debounce within a debounce can be canceled GH#183', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['zomg']);\n\n  let foo = () => {\n    assert.ok(true, 'foo called');\n    return bb.debounce(bar, 10);\n  };\n\n  let bar = () => {\n    assert.ok(true, 'bar called');\n    let timer = foo();\n    bb.cancel(timer);\n\n    setTimeout(done, 10);\n  };\n\n  foo();\n});\n\nQUnit.test('when [callback, string] args passed', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.debounce(function(name) {\n      assert.equal(name, 'batman');\n      functionWasCalled = true;\n    }, 'batman', 100, true);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/debug');\n\nQUnit.test('schedule - DEBUG flag enables stack tagging', function(assert) {\n  let bb = new Backburner(['one']);\n\n  bb.schedule('one', () => {});\n  if (!bb.currentInstance) {\n    throw new Error('bb has no instance');\n  }\n\n  assert.ok(bb.currentInstance && !bb.currentInstance.queues.one.stackFor(0), 'No stack is recorded');\n\n  bb.DEBUG = true;\n\n  bb.schedule('one', () => {});\n\n  if (new Error().stack) { // workaround for CLI runner :(\n    assert.expect(4);\n    let done = assert.async();\n    let stack = bb.currentInstance && bb.currentInstance.queues.one.stackFor(1);\n    assert.ok(typeof stack === 'string', 'A stack is recorded');\n\n    let onError = function(error, errorRecordedForStack) {\n      assert.ok(errorRecordedForStack, 'errorRecordedForStack passed to error function');\n      assert.ok(errorRecordedForStack.stack, 'stack is recorded');\n      done();\n    };\n\n    bb = new Backburner(['errors'], { onError });\n    bb.DEBUG = true;\n\n    bb.run(() => {\n      bb.schedule('errors', () => {\n        throw new Error('message!');\n      });\n    });\n  }\n});\n\nQUnit.test('later - DEBUG flag off does not capture stack', function(assert) {\n  let done = assert.async();\n  let onError = function(error, errorRecordedForStack) {\n    assert.strictEqual(errorRecordedForStack, undefined, 'errorRecordedForStack is not passed to error function when DEBUG is not set');\n    done();\n  };\n  let bb = new Backburner(['one'], { onError });\n\n  bb.later(() => {\n    throw new Error('message!');\n  });\n});\n\nif (new Error().stack) { // workaround for CLI runner :(\n  QUnit.test('later - DEBUG flag on captures stack', function(assert) {\n    assert.expect(3);\n\n    let done = assert.async();\n    let onError = function(error, errorRecordedForStack) {\n      assert.ok(errorRecordedForStack, 'errorRecordedForStack passed to error function');\n      assert.ok(errorRecordedForStack.stack, 'stack is recorded');\n      assert.ok(errorRecordedForStack.stack.indexOf('later') > -1, 'stack includes `later` invocation');\n      done();\n    };\n    let bb = new Backburner(['one'], { onError });\n    bb.DEBUG = true;\n\n    bb.later(() => {\n      throw new Error('message!');\n    });\n  });\n}\n","import Backburner from 'backburner';\n\nQUnit.module('tests/defer-iterable');\n\nclass Iterator {\n  private _collection: Function[];\n  private _iteration: number = 0;\n  constructor(collection: Function[]) {\n    this._collection = collection;\n  }\n\n  public next() {\n    let iteration = this._iteration++;\n    let collection = this._collection;\n    let done = collection.length <= iteration;\n\n    let value = done ? undefined : collection[iteration];\n\n    return {\n      done,\n      value\n    };\n  }\n}\n\nQUnit.test('deferIterable', function(assert) {\n  let bb = new Backburner(['zomg']);\n  let order = 0;\n\n  let tasks = {\n    one:   { count: 0, order: -1 },\n    two:   { count: 0, order: -1 },\n    three: { count: 0, order: -1 }\n  };\n\n  function task1() {\n    tasks.one.count++;\n    tasks.one.order = order++;\n  }\n\n  function task2() {\n    tasks.two.count++;\n    tasks.two.order = order++;\n  }\n\n  function task3() {\n    tasks.three.count++;\n    tasks.three.order = order++;\n  }\n\n  let iterator = () => new Iterator([\n    task1,\n    task2,\n    task3\n  ]);\n\n  bb.run(() => {\n    bb.scheduleIterable('zomg', iterator);\n\n    assert.deepEqual(tasks, {\n      one:   { count: 0,  order: -1 },\n      two:   { count: 0,  order: -1 },\n      three: { count: 0,  order: -1 }\n    });\n  });\n\n  assert.deepEqual(tasks, {\n    one:   { count: 1,  order: 0 },\n    two:   { count: 1,  order: 1 },\n    three: { count: 1,  order: 2 }\n  });\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/defer-once');\n\nQUnit.test('when passed a function', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.scheduleOnce('one', () => {\n      functionWasCalled = true;\n    });\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.scheduleOnce('one', {zomg: 'hi'}, function() {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      functionWasCalled = true;\n    });\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method name', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n  let targetObject = {\n    zomg: 'hi',\n    checkFunction() {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      functionWasCalled = true;\n    }\n  };\n\n  bb.run(() => bb.scheduleOnce('one', targetObject, 'checkFunction'));\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('throws when passed a null method', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.scheduleOnce('deferErrors', {zomg: 'hi'}, null));\n});\n\nQUnit.test('throws when passed an undefined method', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.deferOnce('deferErrors', {zomg: 'hi'}, undefined));\n});\n\nQUnit.test('throws when passed an method name that does not exists on the target', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.deferOnce('deferErrors', {zomg: 'hi'}, 'checkFunction'));\n});\n\nQUnit.test('when passed a target, method, and arguments', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.scheduleOnce('one', {zomg: 'hi'}, function(a, b, c) {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      assert.equal(a, 1, 'the first arguments was passed in');\n      assert.equal(b, 2, 'the second arguments was passed in');\n      assert.equal(c, 3, 'the third arguments was passed in');\n      functionWasCalled = true;\n    }, 1, 2, 3);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed same function twice', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n  let functionWasCalled = false;\n\n  function deferMethod() {\n    i++;\n    assert.equal(i, 1, 'Function should be called only once');\n    functionWasCalled = true;\n  }\n\n  bb.run(() => {\n    bb.scheduleOnce('one', deferMethod);\n    bb.scheduleOnce('one', deferMethod);\n  });\n\n  assert.ok(functionWasCalled, 'function was called only once');\n});\n\nQUnit.test('when passed same function twice with same target', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n  let functionWasCalled = false;\n\n  function deferMethod() {\n    i++;\n    assert.equal(i, 1, 'Function should be called only once');\n    assert.equal(this['first'], 1, 'the target property was set');\n    functionWasCalled = true;\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod);\n    bb.scheduleOnce('one', argObj, deferMethod);\n  });\n\n  assert.ok(functionWasCalled, 'function was called only once');\n});\n\nQUnit.test('when passed same function twice with different targets', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod() {\n    i++;\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  bb.run(() => {\n    bb.scheduleOnce('one', {first: 1}, deferMethod);\n    bb.scheduleOnce('one', {first: 1}, deferMethod);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function twice with same arguments and same target', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    assert.equal(a, 1, 'First argument is set only one time');\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod, 1, 2);\n    bb.scheduleOnce('one', argObj, deferMethod, 1, 2);\n  });\n\n  assert.equal(i, 1, 'function was called once');\n});\n\nQUnit.test('when passed same function twice with same target and different arguments', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    assert.equal(a, 3, 'First argument of only second call is set');\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod, 1, 2);\n    bb.scheduleOnce('one', argObj, deferMethod, 3, 2);\n  });\n\n  assert.equal(i, 1, 'function was called once');\n});\n\nQUnit.test('when passed same function twice with different target and different arguments', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    if (i === 1) {\n      assert.equal(a, 1, 'First argument set during first call');\n    } else {\n      assert.equal(a, 3, 'First argument set during second call');\n    }\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', {first: 1}, deferMethod, 1, 2);\n    bb.scheduleOnce('one', {first: 1}, deferMethod, 3, 2);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function with same target after already triggering in current loop', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one', 'two']);\n  let i = 0;\n\n  function deferMethod(a) {\n    i++;\n    assert.equal(a, i, 'Correct argument is set');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  function scheduleMethod() {\n    bb.scheduleOnce('one', argObj, deferMethod, 2);\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod, 1);\n    bb.scheduleOnce('two', argObj, scheduleMethod);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function with same target after already triggering in current loop', function(assert) {\n  assert.expect(5);\n\n  let argObj = {first: 1};\n  let bb = new Backburner(['one', 'two'], { });\n\n  let i = 0;\n\n  function deferMethod(a) {\n    i++;\n    assert.equal(a, i, 'Correct argument is set');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  function scheduleMethod() {\n    bb.scheduleOnce('one', argObj, deferMethod, 2);\n  }\n\n  bb.run(() => {\n    bb.scheduleOnce('one', argObj, deferMethod, 1);\n    bb.scheduleOnce('two', argObj, scheduleMethod);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('QUnit.test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], { onError });\n\n  bb.run(() => {\n    bb.scheduleOnce('errors', () => {\n      throw new Error('QUnit.test error');\n    });\n  });\n});\n\nQUnit.test('when [queueName, callback, string] args passed', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.scheduleOnce('one', function(name) {\n      assert.equal(name, 'batman');\n      functionWasCalled = true;\n    }, 'batman', 100);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n","import Backburner from 'backburner';\nlet originalDateValueOf = Date.prototype.valueOf;\n\nQUnit.module('tests/defer', {\n  afterEach() {\n    Date.prototype.valueOf = originalDateValueOf;\n  }\n});\n\nQUnit.test('when passed a function', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.schedule('one', () => functionWasCalled = true);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.schedule('one', { zomg: 'hi' }, function() {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      functionWasCalled = true;\n    });\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when [queueName, callback, string] args passed', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.schedule('one', function(name) {\n      assert.equal(name, 'batman');\n      functionWasCalled = true;\n    }, 'batman');\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method name', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n  let targetObject = {\n    zomg: 'hi',\n    checkFunction() {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      functionWasCalled = true;\n    }\n  };\n\n  bb.run(() => bb.schedule('one', targetObject, 'checkFunction'));\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('throws when passed a null method', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.schedule('deferErrors', { zomg: 'hi' }, null));\n});\n\nQUnit.test('throws when passed an undefined method', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.schedule('deferErrors', { zomg: 'hi' }, undefined));\n});\n\nQUnit.test('throws when passed an method name that does not exists on the target', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('You attempted to schedule an action in a queue (deferErrors) for a method that doesn\\'t exist', error.message);\n  }\n\n  let bb = new Backburner(['deferErrors'], {\n    onError\n  });\n\n  bb.run(() => bb.schedule('deferErrors', { zomg: 'hi' }, 'checkFunction'));\n});\n\nQUnit.test('when passed a target, method, and arguments', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.schedule('one', { zomg: 'hi' }, function(a, b, c) {\n      assert.equal(this.zomg, 'hi', 'the target was properly set');\n      assert.equal(a, 1, 'the first arguments was passed in');\n      assert.equal(b, 2, 'the second arguments was passed in');\n      assert.equal(c, 3, 'the third arguments was passed in');\n      functionWasCalled = true;\n    }, 1, 2, 3);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed same function twice', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod() {\n    i++;\n  }\n\n  bb.run(() => {\n    bb.schedule('one', deferMethod);\n    bb.schedule('one', deferMethod);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function twice with arguments', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n  let argObj = {first : 1};\n\n  function deferMethod() {\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  bb.run(() => {\n    bb.schedule('one', argObj, deferMethod);\n    bb.schedule('one', argObj, deferMethod);\n  });\n});\n\nQUnit.test('when passed same function twice with same arguments and same target', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    assert.equal(a, 1, 'First argument is set twice');\n    assert.equal(b, 2, 'Second argument is set twice');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = { first: 1 };\n\n  bb.run(() => {\n    bb.schedule('one', argObj, deferMethod, 1, 2);\n    bb.schedule('one', argObj, deferMethod, 1, 2);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function twice with same target and different arguments', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    if (i === 1) {\n      assert.equal(a, 1, 'First argument set during first call');\n    } else {\n      assert.equal(a, 3, 'First argument set during second call');\n    }\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = { first: 1 };\n\n  bb.run(() => {\n    bb.schedule('one', argObj, deferMethod, 1, 2);\n    bb.schedule('one', argObj, deferMethod, 3, 2);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('when passed same function twice with different target and different arguments', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n  let i = 0;\n\n  function deferMethod(a, b) {\n    i++;\n    if (i === 1) {\n      assert.equal(a, 1, 'First argument set during first call');\n    } else {\n      assert.equal(a, 3, 'First argument set during second call');\n    }\n    assert.equal(b, 2, 'Second argument remains same');\n    assert.equal(this['first'], 1, 'the target property was set');\n  }\n\n  let argObj = {first: 1};\n\n  bb.run(() => {\n    bb.schedule('one', { first: 1 }, deferMethod, 1, 2);\n    bb.schedule('one', { first: 1 }, deferMethod, 3, 2);\n  });\n\n  assert.equal(i, 2, 'function was called twice');\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('QUnit.test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError\n  });\n\n  bb.run(() => {\n    bb.schedule('errors', () => {\n      throw new Error('QUnit.test error');\n    });\n  });\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/events');\n\nQUnit.test('end event should fire after runloop completes', function(assert) {\n  assert.expect(3);\n  let callNumber = 0;\n\n  let bb = new Backburner(['one', 'two']);\n\n  bb.on('end', () => callNumber++);\n\n  function funcOne() {\n    assert.equal(callNumber, 0);\n  }\n\n  function funcTwo() {\n    assert.equal(callNumber, 0);\n  }\n\n  bb.run(() => {\n    bb.schedule('one', null, funcOne);\n    bb.schedule('two', null, funcTwo);\n  });\n\n  assert.equal(callNumber, 1);\n});\n\nQUnit.test('end event should fire before onEnd', function(assert) {\n  assert.expect(3);\n  let callNumber = 0;\n\n  let bb = new Backburner(['one', 'two'], {\n    onEnd() {\n      assert.equal(callNumber, 1);\n    }\n  });\n\n  bb.on('end', () => callNumber++);\n\n  function funcOne() {\n    assert.equal(callNumber, 0);\n  }\n\n  function funcTwo() {\n    assert.equal(callNumber, 0);\n  }\n\n  bb.run(() => {\n    bb.schedule('one', null, funcOne);\n    bb.schedule('two', null, funcTwo);\n  });\n});\n\nQUnit.test('end event should be passed the current and next instance', function(assert) {\n  assert.expect(4);\n  let callNumber = 0;\n\n  let firstArgument = null;\n  let secondArgument = null;\n\n  let bb = new Backburner(['one'], {\n    onEnd(first, second) {\n      assert.equal(firstArgument, first);\n      assert.equal(secondArgument, second);\n    }\n  });\n\n  bb.on('end', (first, second) => {\n    firstArgument = first;\n    secondArgument = second;\n  });\n\n  bb.run(() => bb.schedule('one', null, () => {}));\n  bb.run(() => bb.schedule('one', null, () => {}));\n});\n// blah\n\nQUnit.test('begin event should fire before runloop begins', function(assert) {\n  assert.expect(4);\n  let callNumber = 0;\n\n  let bb = new Backburner(['one', 'two']);\n\n  bb.on('begin', () => callNumber++);\n\n  function funcOne() {\n    assert.equal(callNumber, 1);\n  }\n\n  function funcTwo() {\n    assert.equal(callNumber, 1);\n  }\n\n  assert.equal(callNumber, 0);\n  bb.run(() => {\n    bb.schedule('one', null, funcOne);\n    bb.schedule('two', null, funcTwo);\n  });\n\n  assert.equal(callNumber, 1);\n});\n\nQUnit.test('begin event should fire before onBegin', function(assert) {\n  assert.expect(1);\n  let callNumber = 0;\n\n  let bb = new Backburner(['one', 'two'], {\n    onBegin() {\n      assert.equal(callNumber, 1);\n    }\n  });\n\n  bb.on('begin', () => callNumber++);\n\n  bb.run(() => {\n    bb.schedule('one', null, () => {});\n    bb.schedule('two', null, () => {});\n  });\n});\n\nQUnit.test('begin event should be passed the current and previous instance', function(assert) {\n  assert.expect(4);\n  let callNumber = 0;\n\n  let firstArgument = null;\n  let secondArgument = null;\n\n  let bb = new Backburner(['one'], {\n    onBegin(first, second) {\n      assert.equal(firstArgument, first);\n      assert.equal(secondArgument, second);\n    }\n  });\n\n  bb.on('begin', (first, second) => {\n    firstArgument = first;\n    secondArgument = second;\n  });\n\n  bb.run(() => bb.schedule('one', null, () => {}));\n  bb.run(() => bb.schedule('one', null, () => {}));\n});\n\n// blah\nQUnit.test('events should work with multiple callbacks', function(assert) {\n  assert.expect(2);\n  let firstCalled = false;\n  let secondCalled = false;\n\n  let bb = new Backburner(['one']);\n\n  function first() {\n    firstCalled = true;\n  }\n\n  function second() {\n    secondCalled = true;\n  }\n\n  bb.on('end', first);\n  bb.on('end', second);\n\n  bb.run(() => bb.schedule('one', null, () => {}));\n\n  assert.equal(secondCalled, true);\n  assert.equal(firstCalled, true);\n});\n\nQUnit.test('off should unregister specific callback', function(assert) {\n  assert.expect(2);\n  let firstCalled = false;\n  let secondCalled = false;\n\n  let bb = new Backburner(['one']);\n\n  function first() {\n    firstCalled = true;\n  }\n\n  function second() {\n    secondCalled = true;\n  }\n\n  bb.on('end', first);\n  bb.on('end', second);\n\n  bb.off('end', first);\n\n  bb.run(() => bb.schedule('one', null, () => {}));\n\n  assert.equal(secondCalled, true);\n  assert.equal(firstCalled, false);\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/join');\n\nfunction depth(bb) {\n  return bb.instanceStack.length + (bb.currentInstance ? 1 : 0);\n}\n\nQUnit.test('outside of a run loop', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['one']);\n\n  assert.equal(depth(bb), 0);\n  let result = bb.join(() => {\n    assert.equal(depth(bb), 1);\n    return 'result';\n  });\n  assert.equal(result, 'result');\n  assert.equal(depth(bb), 0);\n});\n\nQUnit.test('inside of a run loop', function(assert) {\n  assert.expect(4);\n\n  let bb = new Backburner(['one']);\n\n  assert.equal(depth(bb), 0);\n  bb.run(() => {\n    let result = bb.join(() => {\n      assert.equal(depth(bb), 1);\n      return 'result';\n    });\n    assert.equal(result, 'result');\n  });\n  assert.equal(depth(bb), 0);\n});\n\nQUnit.test('nested join calls', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n\n  assert.equal(depth(bb), 0);\n  bb.join(() => {\n    assert.equal(depth(bb), 1);\n    bb.join(() => {\n      assert.equal(depth(bb), 1);\n      bb.join(() => {\n        assert.equal(depth(bb), 1);\n      });\n      assert.equal(depth(bb), 1);\n    });\n    assert.equal(depth(bb), 1);\n  });\n  assert.equal(depth(bb), 0);\n});\n\nQUnit.test('nested run loops', function(assert) {\n  assert.expect(7);\n\n  let bb = new Backburner(['one']);\n\n  assert.equal(depth(bb), 0);\n  bb.join(() => {\n    assert.equal(depth(bb), 1);\n    bb.run(() => {\n      assert.equal(depth(bb), 2);\n      bb.join(() => {\n        assert.equal(depth(bb), 2);\n      });\n      assert.equal(depth(bb), 2);\n    });\n    assert.equal(depth(bb), 1);\n  });\n  assert.equal(depth(bb), 0);\n});\n\nQUnit.test('queue execution order', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let items: number[] = [];\n\n  bb.run(() => {\n    items.push(0);\n    bb.schedule('one', () => items.push(4));\n    bb.join(() => {\n      items.push(1);\n      bb.schedule('one', () => items.push(5));\n      items.push(2);\n    });\n    bb.schedule('one', () => items.push(6));\n    items.push(3);\n  });\n  assert.deepEqual(items, [0, 1, 2, 3, 4, 5, 6]);\n});\n\nQUnit.test('without an onError run.join can be caught via `try`/`catch`', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['errors']);\n\n  assert.throws(() => {\n    bb.join(() => {\n      throw new Error('test error');\n    });\n  }, /test error/);\n});\n\nQUnit.test('with an onError which does not rethrow, when joining existing instance, can be caught via `try`/`catch`', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['errors'], {\n    onError(error) {\n      assert.notOk(true, 'onError should not be called as the error from .join is handled by assert.throws');\n    }\n  });\n\n  bb.run(() => {\n    assert.throws(() => {\n      bb.join(() => {\n        throw new Error('test error');\n      });\n    }, /test error/, 'error from within .join can be caught with try/catch');\n  });\n});\n\nQUnit.test('onError which does not rethrow is invoked (only once) when not joining an existing instance', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.join(() => {\n    throw new Error('test error');\n  });\n});\n\nQUnit.test('onError which does not rethrow is invoked (only once) when joining an existing instance', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.run(() => {\n    bb.join(() => {\n      throw new Error('test error');\n    });\n  });\n});\n\nQUnit.test('onError which does rethrow is invoked (only once) when not joining an existing instance', function(assert) {\n  assert.expect(2);\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n    throw error;\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  assert.throws(() => {\n    bb.join(() => {\n      throw new Error('test error');\n    });\n  }, /test error/);\n});\n\nQUnit.test('onError which does rethrow is invoked (only once) when joining an existing instance', function(assert) {\n  assert.expect(2);\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n    throw error;\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  assert.throws(() => {\n    bb.run(() => {\n      bb.join(() => {\n        throw new Error('test error');\n      });\n    });\n  }, /test error/);\n});\n\nQUnit.test('when [callback, string] args passed', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.join(function(name) {\n    assert.equal(name, 'batman');\n    functionWasCalled = true;\n  }, 'batman');\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n","import Backburner, { buildPlatform } from 'backburner';\n\nQUnit.module('tests/multi-turn');\n\nconst queue: any[] = [];\nlet platform;\nfunction buildFakePlatform(flush) {\n  platform = buildPlatform(flush);\n  platform.flushSync = function() {\n    flush();\n  };\n  return platform;\n}\n\nQUnit.test('basic', function(assert) {\n  let bb = new Backburner(['zomg'], {\n    // This is just a place holder for now, but somehow the system needs to\n    // know to when to stop\n    mustYield() {\n      return true; // yield after each step, for now.\n    },\n    _buildPlatform: buildFakePlatform\n  });\n\n  let order = -1;\n  let tasks = {\n    one:   { count: 0, order: -1 },\n    two:   { count: 0, order: -1 },\n    three: { count: 0, order: -1 }\n  };\n\n  bb.schedule('zomg', null, () => {\n    tasks.one.count++;\n    tasks.one.order = ++order;\n  });\n\n  bb.schedule('zomg', null, () => {\n    tasks.two.count++;\n    tasks.two.order = ++order;\n  });\n\n  bb.schedule('zomg', null, () => {\n    tasks.three.count++;\n    tasks.three.order = ++order;\n  });\n\n  assert.deepEqual(tasks, {\n    one:   { count: 0, order: -1 },\n    two:   { count: 0, order: -1 },\n    three: { count: 0, order: -1 }\n  }, 'no tasks have been run before the platform flushes');\n\n  platform.flushSync();\n\n  assert.deepEqual(tasks, {\n    one:   { count: 1, order:  0 },\n    two:   { count: 0, order: -1 },\n    three: { count: 0, order: -1 }\n  }, 'TaskOne has been run before the platform flushes');\n\n  platform.flushSync();\n\n  assert.deepEqual(tasks, {\n    one:   { count: 1, order:  0 },\n    two:   { count: 1, order:  1 },\n    three: { count: 0, order: -1 }\n  }, 'TaskOne and TaskTwo has been run before the platform flushes');\n\n  platform.flushSync();\n\n  assert.deepEqual(tasks, {\n    one:   { count: 1, order:  0 },\n    two:   { count: 1, order:  1 },\n    three: { count: 1, order:  2 }\n  }, 'TaskOne, TaskTwo and TaskThree has been run before the platform flushes');\n});\n\nQUnit.test('properly cancel items which are added during flush', function(assert) {\n  let bb = new Backburner(['zomg'], {\n    // This is just a place holder for now, but somehow the system needs to\n    // know to when to stop\n    mustYield() {\n      return true; // yield after each step, for now.\n    },\n\n    _buildPlatform: buildFakePlatform\n  });\n\n  let fooCalled = 0;\n  let barCalled = 0;\n\n  let obj1 = {\n    foo() {\n      fooCalled++;\n    }\n  };\n\n  let obj2 = {\n    bar() {\n      barCalled++;\n    }\n  };\n\n  bb.scheduleOnce('zomg', obj1, 'foo');\n  bb.scheduleOnce('zomg', obj1, 'foo');\n  bb.scheduleOnce('zomg', obj2, 'bar');\n  bb.scheduleOnce('zomg', obj2, 'bar');\n\n  platform.flushSync();\n\n  let timer1 = bb.scheduleOnce('zomg', obj1, 'foo');\n  let timer2 = bb.scheduleOnce('zomg', obj2, 'bar');\n  bb.cancel(timer1);\n  bb.cancel(timer2);\n\n  platform.flushSync();\n  platform.flushSync();\n  platform.flushSync();\n\n  assert.equal(fooCalled, 1, 'fooCalled');\n  assert.equal(barCalled, 1, 'barCalled');\n\n});\n","import Backburner from 'backburner';\n\nlet Queue = (Backburner as any).Queue;\n\nQUnit.module('tests/queue-push-unique');\nlet slice = [].slice;\n\nQUnit.test('pushUnique: 2 different targets', function(assert) {\n  let queue = new Queue('foo');\n  let target1fooWasCalled: string[][] = [];\n  let target2fooWasCalled: string[][] = [];\n  let target1 = {\n    foo() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  let target2 = {\n    foo() {\n      target2fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target2, target2.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target2fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target2fooWasCalled.length, 1, 'expected: target 2.foo to be called only once');\n  assert.deepEqual(target2fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods', function(assert) {\n  let queue = new Queue('foo');\n  let target1fooWasCalled: string[][] = [];\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n  assert.deepEqual(target1barWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 1 different methods called twice', function(assert) {\n  let queue = new Queue('foo');\n  let target1fooWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 2 different targets', function(assert) {\n  let queue = new Queue('foo', {});\n  let target1fooWasCalled: string[][] = [];\n  let target2fooWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  let target2 = {\n    foo: function() {\n      target2fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target2, target2.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target2fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target2fooWasCalled.length, 1, 'expected: target 2.foo to be called only once');\n  assert.deepEqual(target2fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods', function(assert) {\n  let queue = new Queue('foo', {});\n  let target1fooWasCalled: string[][] = [];\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n  assert.deepEqual(target1barWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 1 diffe`rent methods called twice', function(assert) {\n  let queue = new Queue('foo', {});\n  let target1fooWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods, second one called twice', function(assert) {\n  let queue = new Queue('foo', {});\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo);\n  queue.pushUnique(target1, target1.bar, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n});\n\nQUnit.test('pushUnique: 2 different targets', function(assert) {\n  let queue = new Queue('foo', {});\n\n  let target1fooWasCalled: string[][] = [];\n  let target2fooWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  let target2 = {\n    foo: function() {\n      target2fooWasCalled.push(slice.call(arguments));\n    }\n  };\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target2, target2.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target2fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target2fooWasCalled.length, 1, 'expected: target 2.foo to be called only once');\n  assert.deepEqual(target2fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods', function(assert) {\n  let queue = new Queue('foo', {});\n  let target1fooWasCalled: string[][] = [];\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['a']);\n  assert.deepEqual(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n  assert.deepEqual(target1barWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 1 different methods called twice', function(assert) {\n  let queue = new Queue('foo', {});\n  let target1fooWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  queue.pushUnique(target1, target1.foo, ['b']);\n\n  assert.deepEqual(target1fooWasCalled, []);\n\n  queue.flush();\n\n  assert.deepEqual(target1fooWasCalled.length, 1, 'expected: target 1.foo to be called only once');\n  assert.deepEqual(target1fooWasCalled[0], ['b']);\n});\n\nQUnit.test('pushUnique: 1 target, 2 different methods, second one called twice', function(assert) {\n  let queue = new Queue('foo', {});\n\n  let target1barWasCalled: string[][] = [];\n  let target1 = {\n    foo: function() {\n    },\n    bar: function() {\n      target1barWasCalled.push(slice.call(arguments));\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo);\n  queue.pushUnique(target1, target1.bar, ['a']);\n  queue.pushUnique(target1, target1.bar, ['b']);\n\n  assert.deepEqual(target1barWasCalled, []);\n\n  queue.flush();\n\n  assert.equal(target1barWasCalled.length, 1, 'expected: target 1.bar to be called only once');\n});\n\nQUnit.test('can cancel property', function(assert) {\n  let queue = new Queue('foo', {});\n\n  let target1fooWasCalled: number = 0;\n  let target2fooWasCalled: number = 0;\n  let target1 = {\n    foo: function() {\n      target1fooWasCalled++;\n    }\n  };\n\n  let target2 = {\n    foo: function() {\n      target2fooWasCalled++;\n    }\n  };\n\n  let timer1 = queue.pushUnique(target1, target1.foo);\n  let timer2 = queue.pushUnique(target2, target2.foo);\n\n  queue.cancel(timer2);\n  queue.cancel(timer1);\n\n  queue.pushUnique(target1, target1.foo);\n  queue.pushUnique(target1, target1.foo);\n  queue.pushUnique(target2, target2.foo);\n  queue.pushUnique(target2, target2.foo);\n\n  queue.flush();\n\n  assert.equal(target1fooWasCalled, 1);\n  assert.equal(target2fooWasCalled, 1);\n});\n\nQUnit.test('pushUnique: 1 target, 1 method called twice, canceled 2 call', function(assert) {\n  let queue = new Queue('foo');\n  let invocationArgs: string[][] = [];\n  let target1 = {\n    foo: function() {\n      invocationArgs.push(...arguments);\n    }\n  };\n\n  queue.pushUnique(target1, target1.foo, ['a']);\n  let timer = queue.pushUnique(target1, target1.foo, ['b']);\n\n  assert.deepEqual(invocationArgs, [], 'precond - empty initially');\n\n  queue.cancel(timer);\n\n  queue.flush();\n\n  assert.deepEqual(invocationArgs, [], 'still has not been invoked');\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/queue');\n\nQUnit.test('actions scheduled on previous queue, start over from beginning', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one', 'two']);\n  let step = 0;\n\n  bb.run(function() {\n    assert.equal(step++, 0, '0');\n\n    bb.schedule('two', null, function() {\n      assert.equal(step++, 1, '1');\n\n      bb.schedule('one', null, function() {\n        assert.equal(step++, 3, '3');\n      });\n    });\n\n    bb.schedule('two', null, function() {\n      assert.equal(step++, 2, '2');\n    });\n  });\n\n  assert.equal(step, 4, '4');\n});\n\nQUnit.test('Queue#flush should be recursive if new items are added', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let count = 0;\n\n  bb.run(function() {\n    function increment() {\n      if (++count < 3) {\n        bb.schedule('one', increment);\n      }\n\n      if (count === 3) {\n\n        bb.schedule('one', increment);\n      }\n    }\n\n    increment();\n    assert.equal(count, 1, 'should not have run yet');\n\n    let currentInstance = bb.currentInstance;\n    if (currentInstance) {\n      currentInstance.queues.one.flush();\n    }\n    assert.equal(count, 4, 'should have run all scheduled methods, even ones added during flush');\n  });\n\n});\n\nQUnit.test('Default queue is automatically set to first queue if none is provided', function(assert) {\n  let bb = new Backburner(['one', 'two']);\n  assert.equal(bb.defaultQueue, 'one');\n});\n\nQUnit.test('Default queue can be manually configured', function(assert) {\n  let bb = new Backburner(['one', 'two'], {\n    defaultQueue: 'two'\n  });\n\n  assert.equal(bb.defaultQueue, 'two');\n});\n\nQUnit.test('onBegin and onEnd are called and passed the correct parameters', function(assert) {\n  assert.expect(2);\n\n  let befores: Array<any | null | undefined> = [];\n  let afters: Array<any | null | undefined> = [];\n  let expectedBefores: Array<any | null | undefined> = [];\n  let expectedAfters: Array<any | null | undefined> = [];\n  let outer: any;\n  let inner: any;\n\n  let bb = new Backburner(['one'], {\n    onBegin: function(current, previous) {\n      befores.push(current);\n      befores.push(previous);\n    },\n    onEnd: function(current, next) {\n      afters.push(current);\n      afters.push(next);\n    }\n  });\n\n  bb.run(function() {\n    outer = bb.currentInstance;\n    bb.run(function() {\n      inner = bb.currentInstance;\n    });\n  });\n\n  expectedBefores = [outer, null, inner, outer];\n  expectedAfters = [inner, outer, outer, null];\n\n  assert.deepEqual(befores, expectedBefores, 'before callbacks successful');\n  assert.deepEqual(afters, expectedAfters, 'after callback successful');\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/run');\n\nQUnit.test('when passed a function', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => functionWasCalled = true);\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target and method', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run({zomg: 'hi'}, function() {\n    assert.equal(this.zomg, 'hi', 'the target was properly set');\n    functionWasCalled = true;\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('when passed a target, method, and arguments', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run({zomg: 'hi'}, function(a, b, c) {\n    assert.equal(this.zomg, 'hi', 'the target was properly set');\n    assert.equal(a, 1, 'the first arguments was passed in');\n    assert.equal(b, 2, 'the second arguments was passed in');\n    assert.equal(c, 3, 'the third arguments was passed in');\n    functionWasCalled = true;\n  }, 1, 2, 3);\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n\nQUnit.test('nesting run loops preserves the stack', function(assert) {\n  assert.expect(10);\n\n  let bb = new Backburner(['one']);\n  let outerBeforeFunctionWasCalled = false;\n  let middleBeforeFunctionWasCalled = false;\n  let innerFunctionWasCalled = false;\n  let middleAfterFunctionWasCalled = false;\n  let outerAfterFunctionWasCalled = false;\n\n  bb.run(() => {\n    bb.schedule('one', () => {\n      outerBeforeFunctionWasCalled = true;\n    });\n\n    bb.run(() => {\n      bb.schedule('one', () => {\n        middleBeforeFunctionWasCalled = true;\n      });\n\n      bb.run(() => {\n        bb.schedule('one', () => {\n          innerFunctionWasCalled = true;\n        });\n        assert.ok(!innerFunctionWasCalled, 'function is deferred');\n      });\n      assert.ok(innerFunctionWasCalled, 'function is called');\n\n      bb.schedule('one', () => {\n        middleAfterFunctionWasCalled = true;\n      });\n\n      assert.ok(!middleBeforeFunctionWasCalled, 'function is deferred');\n      assert.ok(!middleAfterFunctionWasCalled, 'function is deferred');\n    });\n\n    assert.ok(middleBeforeFunctionWasCalled, 'function is called');\n    assert.ok(middleAfterFunctionWasCalled, 'function is called');\n\n    bb.schedule('one', () => {\n      outerAfterFunctionWasCalled = true;\n    });\n\n    assert.ok(!outerBeforeFunctionWasCalled, 'function is deferred');\n    assert.ok(!outerAfterFunctionWasCalled, 'function is deferred');\n  });\n\n  assert.ok(outerBeforeFunctionWasCalled, 'function is called');\n  assert.ok(outerAfterFunctionWasCalled, 'function is called');\n});\n\nQUnit.test('runs can be nested', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let step = 0;\n\n  bb.run(() => {\n    assert.equal(step++, 0);\n\n    bb.run(() => {\n      assert.equal(step++, 1);\n    });\n  });\n});\n\nQUnit.test('run returns value', function(assert) {\n  let bb = new Backburner(['one']);\n  let value = bb.run(() => 'hi');\n\n  assert.equal(value, 'hi');\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('QUnit.test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.run(() => {\n    throw new Error('QUnit.test error');\n  });\n});\n\nQUnit.test('onError set after start', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['errors']);\n\n  bb.run(() => assert.ok(true));\n\n  bb.options.onError = function(error) {\n    assert.equal('QUnit.test error', error.message);\n  };\n\n  bb.run(() => { throw new Error('QUnit.test error'); });\n});\n\nQUnit.test('onError with target and action', function(assert) {\n  assert.expect(3);\n\n  let target = {};\n\n  let bb = new Backburner(['errors'], {\n    onErrorTarget: target,\n    onErrorMethod: 'onerror'\n  });\n\n  bb.run(() => assert.ok(true));\n\n  target['onerror'] = function(error) {\n    assert.equal('QUnit.test error', error.message);\n  };\n\n  bb.run(() => { throw new Error('QUnit.test error'); });\n\n  target['onerror'] = function() { };\n\n  bb.run(() => { throw new Error('QUnit.test error'); });\n\n  target['onerror'] = function(error) {\n    assert.equal('QUnit.test error', error.message);\n  };\n\n  bb.run(() => { throw new Error('QUnit.test error'); });\n});\n\nQUnit.test('when [callback, string] args passed', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(function(name) {\n    assert.equal(name, 'batman');\n    functionWasCalled = true;\n  }, 'batman');\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n","/* tslint:disable:no-shadowed-variable*/\nimport Backburner from 'backburner';\n\nconst originalDateNow = Date.now;\nconst originalDateValueOf = Date.prototype.valueOf;\n\nQUnit.module('tests/set-timeout-test', {\n  afterEach() {\n    Date.now = originalDateNow;\n    Date.prototype.valueOf = originalDateValueOf;\n  }\n});\n\nQUnit.test('later', function(assert) {\n  assert.expect(6);\n\n  let bb = new Backburner(['one']);\n  let step = 0;\n  let instance;\n  let done = assert.async();\n\n  // Force +new Date to return the same result while scheduling\n  // run.later timers. Otherwise: non-determinism!\n  let now = +new Date();\n  Date.prototype.valueOf = function() { return now; };\n\n  bb.later(null, () => {\n    instance = bb.currentInstance;\n    assert.equal(step++, 0);\n  }, 10);\n\n  bb.later(null, () => {\n    assert.equal(step++, 1);\n    assert.equal(instance, bb.currentInstance, 'same instance');\n  }, 10);\n\n  Date.prototype.valueOf = originalDateValueOf;\n  // spin so that when we execute timers (+new Date()) will be greater than the\n  // time scheduled above; not a problem in real life as we will never 'wait'\n  // 0ms\n  while ((+ new Date()) <= now + 10) {}\n\n  bb.later(null, () => {\n    assert.equal(step++, 2);\n\n    bb.later(null, () => {\n      assert.equal(step++, 3);\n      assert.ok(true, 'Another later will execute correctly');\n      done();\n    }, 1);\n  }, 20);\n});\n\nQUnit.test('later should rely on stubbed `Date.now`', function(assert) {\n  assert.expect(1);\n\n  let bb = new Backburner(['one']);\n  let done = assert.async();\n  let globalNowWasUsed = false;\n\n  Date.now = function() {\n    globalNowWasUsed = true;\n    return originalDateNow();\n  };\n\n  bb.later(() => {\n    assert.ok(globalNowWasUsed);\n    done();\n  }, 1);\n});\n\nlet bb;\nQUnit.module('later arguments / arity', {\n  beforeEach() {\n    bb = new Backburner(['one']);\n  },\n  afterEach() {\n    bb = undefined;\n  }\n});\n\nQUnit.test('[callback]', function(assert) {\n  assert.expect(2);\n\n  let done = assert.async();\n\n  bb.later(function() {\n    assert.equal(arguments.length, 0);\n    assert.ok(true, 'was called');\n    done();\n  });\n});\n\nQUnit.test('[callback, undefined]', function(assert) {\n  assert.expect(2);\n  let done = assert.async();\n\n  bb.later(function() {\n    assert.equal(arguments.length, 1);\n    assert.ok(true, 'was called');\n    done();\n  }, undefined);\n});\n\nQUnit.test('[null, callback, undefined]', function(assert) {\n  assert.expect(2);\n  let done = assert.async();\n\n  bb.later(null, function() {\n    assert.equal(arguments.length, 0);\n    assert.ok(true, 'was called');\n    done();\n  });\n});\n\nQUnit.test('[null, callback, undefined]', function(assert) {\n  assert.expect(2);\n  let done = assert.async();\n\n  bb.later(null, function() {\n    assert.equal(arguments.length, 1);\n    assert.ok(true, 'was called');\n    done();\n  }, undefined);\n});\n\nQUnit.test('[null, callback, null]', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n\n  bb.later(null, function() {\n    assert.equal(arguments.length, 1);\n    assert.equal(arguments[0], null);\n    assert.ok(true, 'was called');\n    done();\n  }, null);\n});\n\nQUnit.test('[callback, string, string, string]', function(assert) {\n  assert.expect(5);\n\n  let done = assert.async();\n\n  bb.later(function() {\n    assert.equal(arguments.length, 3);\n    assert.equal(arguments[0], 'a');\n    assert.equal(arguments[1], 'b');\n    assert.equal(arguments[2], 'c');\n    assert.ok(true, 'was called');\n    done();\n  }, 'a', 'b', 'c');\n});\n\nQUnit.test('[null, callback, string, string, string]', function(assert) {\n  assert.expect(5);\n\n  let done = assert.async();\n\n  bb.later(null, function() {\n    assert.equal(arguments.length, 3);\n    assert.equal(arguments[0], 'a');\n    assert.equal(arguments[1], 'b');\n    assert.equal(arguments[2], 'c');\n    assert.ok(true, 'was called');\n    done();\n  }, 'a', 'b', 'c');\n});\n\nQUnit.test('[null, callback, string, string, string, number]', function(assert) {\n  assert.expect(5);\n  let done = assert.async();\n  bb.later(null, function() {\n    assert.equal(arguments.length, 3);\n    assert.equal(arguments[0], 'a');\n    assert.equal(arguments[1], 'b');\n    assert.equal(arguments[2], 'c');\n    assert.ok(true, 'was called');\n    done();\n  }, 'a', 'b', 'c', 10);\n});\n\nQUnit.test('[null, callback, string, string, string, numericString]', function(assert) {\n  assert.expect(5);\n  let done = assert.async();\n  bb.later(null, function() {\n    assert.equal(arguments.length, 3);\n    assert.equal(arguments[0], 'a');\n    assert.equal(arguments[1], 'b');\n    assert.equal(arguments[2], 'c');\n    assert.ok(true, 'was called');\n    done();\n  },  'a', 'b', 'c', '1');\n});\n\nQUnit.test('[obj, string]', function(assert) {\n  assert.expect(1);\n  let done = assert.async();\n  bb.later({\n    bro() {\n      assert.ok(true, 'was called');\n      done();\n    }\n  }, 'bro');\n});\n\nQUnit.test('[obj, string, value]', function(assert) {\n  assert.expect(3);\n  let done = assert.async();\n  bb.later({\n    bro() {\n      assert.equal(arguments.length, 1);\n      assert.equal(arguments[0], 'value');\n      assert.ok(true, 'was called');\n      done();\n    }\n  }, 'bro', 'value');\n});\n\nQUnit.test('[obj, string, value, number]', function(assert) {\n  let done = assert.async();\n  bb.later({\n    bro() {\n      assert.equal(arguments.length, 1);\n      assert.equal(arguments[0], 'value');\n      assert.ok(true, 'was called');\n      done();\n    }\n  }, 'bro', 'value', 1);\n});\n\nQUnit.test('[obj, string, value, numericString]', function(assert) {\n  let done = assert.async();\n  bb.later({\n    bro() {\n      assert.equal(arguments.length, 1);\n      assert.equal(arguments[0], 'value');\n      assert.ok(true, 'was called');\n      done();\n    }\n  }, 'bro', 'value', '1');\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  let done = assert.async();\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n    done();\n  }\n\n  bb = new Backburner(['errors'], { onError });\n\n  bb.later(() => { throw new Error('test error'); }, 1);\n});\n\nQUnit.test('later doesn\\'t trigger twice with earlier later', function(assert) {\n  assert.expect(4);\n\n  bb = new Backburner(['one']);\n  let called1 = 0;\n  let called2 = 0;\n  let beginCalls = 0;\n  let endCalls = 0;\n  let oldBegin = bb.begin;\n  let oldEnd = bb.end;\n  let done = assert.async();\n\n  bb.begin = function() {\n    beginCalls++;\n    oldBegin.call(bb);\n  };\n\n  bb.end = function() {\n    endCalls++;\n    oldEnd.call(bb);\n  };\n\n  bb.later(() => called1++, 50);\n  bb.later(() => called2++, 10);\n\n  setTimeout(() => {\n    assert.equal(called1, 1, 'timeout 1 was called once');\n    assert.equal(called2, 1, 'timeout 2 was called once');\n    assert.equal(beginCalls, 2, 'begin() was called twice');\n    assert.equal(endCalls, 2, 'end() was called twice');\n    done();\n  }, 100);\n});\n\nQUnit.test('later with two Backburner instances', function(assert) {\n  assert.expect(8);\n\n  let steps = 0;\n  let done = assert.async();\n  let bb1 = new Backburner(['one'], {\n    onBegin() {\n      assert.equal(++steps, 4);\n    }\n  });\n  let bb2 = new Backburner(['one'], {\n    onBegin() {\n      assert.equal(++steps, 6);\n    }\n  });\n\n  assert.equal(++steps, 1);\n\n  bb1.later(() => assert.equal(++steps, 5), 10);\n\n  assert.equal(++steps, 2);\n\n  bb2.later(() => assert.equal(++steps, 7), 10);\n\n  assert.equal(++steps, 3);\n\n  setTimeout(() => {\n    assert.equal(++steps, 8);\n    done();\n  }, 50);\n});\n\nQUnit.test('expired timeout doesn\\'t hang when setting a new timeout', function(assert) {\n  assert.expect(3);\n\n  let called1At = 0;\n  let called2At = 0;\n  let done = assert.async();\n\n  bb.later(() => called1At = Date.now(), 1);\n\n  // Block JS to simulate https://github.com/ebryn/backburner.js/issues/135\n  let waitUntil = Date.now() + 5;\n  while (Date.now() < waitUntil) { }\n\n  bb.later(() => called2At = Date.now(), 50);\n\n  setTimeout(() => {\n    assert.ok(called1At !== 0, 'timeout 1 was called');\n    assert.ok(called2At !== 0, 'timeout 2 was called');\n    assert.ok(called2At - called1At > 10, 'timeout 1 did not wait for timeout 2');\n    done();\n  }, 60);\n});\n\nQUnit.test('NaN timeout doesn\\'t hang other timeouts', function(assert) {\n  assert.expect(2);\n\n  let done = assert.async();\n  let called1At = 0;\n  let called2At = 0;\n\n  bb.later(() => called1At = Date.now(), 1);\n  bb.later(() => {}, NaN);\n  bb.later(() => called2At = Date.now(), 10);\n\n  setTimeout(() => {\n    assert.ok(called1At !== 0, 'timeout 1 was called');\n    assert.ok(called2At !== 0, 'timeout 2 was called');\n    done();\n  }, 20);\n});\n\nQUnit.test('when [callback, string] args passed', function(assert) {\n  assert.expect(1);\n  let done = assert.async();\n\n  let bb = new Backburner(['one']);\n\n  bb.later(function(name) {\n    assert.equal(name, 'batman');\n    done();\n  }, 'batman', 0);\n});\n","import Backburner from 'backburner';\n\nQUnit.module('tests/throttle');\n\nQUnit.test('throttle', function(assert) {\n  assert.expect(18);\n\n  let bb = new Backburner(['zomg']);\n  let step = 0;\n  let done = assert.async();\n\n  let wasCalled = false;\n  function throttler() {\n    assert.ok(!wasCalled);\n    wasCalled = true;\n  }\n\n  // let's throttle the function `throttler` for 40ms\n  // it will be executed in 40ms\n  bb.throttle(null, throttler, 40, false);\n  assert.equal(step++, 0);\n\n  // let's schedule `throttler` to run in 10ms\n  setTimeout(() => {\n    assert.equal(step++, 1);\n    assert.ok(!wasCalled);\n    bb.throttle(null, throttler, false);\n  }, 10);\n\n  // let's schedule `throttler` to run again in 20ms\n  setTimeout(() => {\n    assert.equal(step++, 2);\n    assert.ok(!wasCalled);\n    bb.throttle(null, throttler, false);\n  }, 20);\n\n  // let's schedule `throttler` to run yet again in 30ms\n  setTimeout(() => {\n    assert.equal(step++, 3);\n    assert.ok(!wasCalled);\n    bb.throttle(null, throttler, false);\n  }, 30);\n\n  // at 40ms, `throttler` will get called once\n\n  // now, let's schedule an assertion to occur at 50ms,\n  // 10ms after `throttler` has been called\n  setTimeout(() => {\n    assert.equal(step++, 4);\n    assert.ok(wasCalled);\n  }, 50);\n\n  // great, we've made it this far, there's one more thing\n  // we need to test. we want to make sure we can call `throttle`\n  // again with the same target/method after it has executed\n  // at the 60ms mark, let's schedule another call to `throttle`\n  setTimeout(() => {\n    wasCalled = false; // reset the flag\n\n    // assert call order\n    assert.equal(step++, 5);\n\n    // call throttle for the second time\n    bb.throttle(null, throttler, 100, false);\n\n    // assert that it is called in the future and not blackholed\n    setTimeout(() => {\n      assert.equal(step++, 6);\n      assert.ok(wasCalled, 'Another throttle call with the same function can be executed later');\n    }, 110);\n  }, 60);\n\n  setTimeout(() => {\n    wasCalled = false; // reset the flag\n\n    // assert call order\n    assert.equal(step++, 7);\n\n    // call throttle again that time using a string number like time interval\n    bb.throttle(null, throttler, '100', false);\n\n    // assert that it is called in the future and not blackholed\n    setTimeout(() => {\n      assert.equal(step++, 8);\n      assert.ok(wasCalled, 'Throttle accept a string number like time interval');\n      done();\n    }, 110);\n  }, 180);\n});\n\nQUnit.test('throttle with cancelTimers', function(assert) {\n  assert.expect(1);\n\n  let count = 0;\n  let bb = new Backburner(['zomg']);\n\n  // Throttle a no-op 10ms\n  bb.throttle(null, () => { /* no-op */ }, 10, false);\n\n  try {\n    bb.cancelTimers();\n  } catch (e) {\n    count++;\n  }\n\n  assert.equal(count, 0, 'calling cancelTimers while something is being throttled does not throw an error');\n});\n\nQUnit.test('throttled function is called with final argument', function(assert) {\n  assert.expect(1);\n  let done = assert.async();\n\n  let count = 0;\n  let bb = new Backburner(['zomg']);\n\n  function throttled(arg) {\n    assert.equal(arg, 'bus');\n    done();\n  }\n\n  bb.throttle(null, throttled, 'car' , 10, false);\n  bb.throttle(null, throttled, 'bicycle' , 10, false);\n  bb.throttle(null, throttled, 'bus' , 10, false);\n});\n\nQUnit.test('throttle returns same timer', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['joker']);\n\n  function throttled1() {}\n  function throttled2() {}\n\n  let timer1 = bb.throttle(null, throttled1, 10);\n  let timer2 = bb.throttle(null, throttled2, 10);\n  let timer3 = bb.throttle(null, throttled1, 10);\n  let timer4 = bb.throttle(null, throttled2, 10);\n\n  assert.equal(timer1, timer3);\n  assert.equal(timer2, timer4);\n});\n\nQUnit.test('throttle leading edge', function(assert) {\n  assert.expect(10);\n\n  let bb = new Backburner(['zerg']);\n  let throttle;\n  let throttle2;\n  let wasCalled = false;\n  let done = assert.async();\n\n  function throttler() {\n    assert.ok(!wasCalled, 'throttler hasn\\'t been called yet');\n    wasCalled = true;\n  }\n\n  // let's throttle the function `throttler` for 40ms\n  // it will be executed immediately, but throttled for the future hits\n  throttle = bb.throttle(null, throttler, 40);\n\n  assert.ok(wasCalled, 'function was executed immediately');\n\n  wasCalled = false;\n  // let's schedule `throttler` to run again, it shouldn't be allowed to queue for another 40 msec\n  throttle2 = bb.throttle(null, throttler, 40);\n\n  assert.equal(throttle, throttle2, 'No new throttle was inserted, returns old throttle');\n\n  setTimeout(() => {\n    assert.ok(!wasCalled, 'attempt to call throttle again didn\\'t happen');\n\n    throttle = bb.throttle(null, throttler, 40);\n    assert.ok(wasCalled, 'newly inserted throttle after timeout functioned');\n\n    assert.ok(bb.cancel(throttle), 'wait time of throttle was cancelled');\n\n    wasCalled = false;\n    throttle2 = bb.throttle(null, throttler, 40);\n    assert.notEqual(throttle, throttle2, 'the throttle is different');\n    assert.ok(wasCalled, 'throttle was inserted and run immediately after cancel');\n    done();\n  }, 60);\n});\n\nQUnit.test('throttle returns timer information usable for cancelling', function(assert) {\n  assert.expect(3);\n\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let wasCalled = false;\n\n  function throttler() {\n    assert.ok(false, 'this method shouldn\\'t be called');\n    wasCalled = true;\n  }\n\n  let timer = bb.throttle(null, throttler, 1, false);\n\n  assert.ok(bb.cancel(timer), 'the timer is cancelled');\n\n  // should return false second time around\n  assert.ok(!bb.cancel(timer), 'the timer no longer exists in the list');\n\n  setTimeout(() => {\n    assert.ok(!wasCalled, 'the timer wasn\\'t called after waiting');\n    done();\n  }, 60);\n});\n\nQUnit.test('throttler cancel after it\\'s executed returns false', function(assert) {\n  assert.expect(3);\n\n  let bb = new Backburner(['darkknight']);\n  let done = assert.async();\n\n  let wasCalled = false;\n\n  function throttler() {\n    assert.ok(true, 'the throttled method was called');\n    wasCalled = true;\n  }\n\n  let timer = bb.throttle(null, throttler, 1);\n\n  setTimeout(() => {\n    assert.ok(!bb.cancel(timer), 'no timer existed to cancel');\n    assert.ok(wasCalled, 'the timer was actually called');\n    done();\n  }, 10);\n});\n\nQUnit.test('throttler returns the appropriate timer to cancel if the old item still exists', function(assert) {\n  assert.expect(5);\n\n  let bb = new Backburner(['robin']);\n  let wasCalled = false;\n  let done = assert.async();\n\n  function throttler() {\n    assert.ok(true, 'the throttled method was called');\n    wasCalled = true;\n  }\n\n  let timer = bb.throttle(null, throttler, 1);\n  let timer2 = bb.throttle(null, throttler, 1);\n\n  assert.deepEqual(timer, timer2, 'the same timer was returned');\n\n  setTimeout(() => {\n    bb.throttle(null, throttler, 1);\n    assert.ok(!bb.cancel(timer), 'the second timer isn\\'t removed, despite appearing to be the same item');\n    assert.ok(wasCalled, 'the timer was actually called');\n    done();\n  }, 10);\n\n});\n\nQUnit.test('throttle without a target, without args', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith = new Array();\n  function throttled(...args) {\n    calledCount++;\n    calledWith.push(args);\n  }\n\n  bb.throttle(throttled, 10);\n  bb.throttle(throttled, 10);\n  bb.throttle(throttled, 10);\n  assert.equal(calledCount, 1, 'throttle method was called immediately');\n  assert.deepEqual(calledWith, [ [] ], 'throttle method was called with the correct arguments');\n\n  setTimeout(() => {\n    bb.throttle(throttled, 10);\n    assert.equal(calledCount, 1, 'throttle method was not called again within the time window');\n  }, 0);\n\n  setTimeout(() => {\n    assert.equal(calledCount, 1, 'throttle method was was only called once');\n    done();\n  }, 20);\n});\n\nQUnit.test('throttle without a target, without args - can be canceled', function(assert) {\n  let bb = new Backburner(['batman']);\n\n  let fooCalledCount = 0;\n  let barCalledCount = 0;\n  function foo() {\n    fooCalledCount++;\n  }\n  function bar() {\n    barCalledCount++;\n  }\n\n  bb.throttle(foo, 10);\n  bb.throttle(foo, 10);\n  assert.equal(fooCalledCount, 1, 'foo was called immediately, then throttle');\n\n  bb.throttle(bar, 10);\n  let timer = bb.throttle(bar, 10);\n  assert.equal(barCalledCount, 1, 'bar was called immediately, then throttle');\n\n  bb.cancel(timer);\n  bb.throttle(bar, 10);\n  assert.equal(barCalledCount, 2, 'after canceling the prior throttle, bar was called again');\n});\n\nQUnit.test('throttle without a target, without args, not immediate', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith = new Array();\n  function throttled(...args) {\n    calledCount++;\n    calledWith.push(args);\n  }\n\n  bb.throttle(throttled, 10, false);\n  bb.throttle(throttled, 10, false);\n  bb.throttle(throttled, 10, false);\n  assert.equal(calledCount, 0, 'throttle method was not called immediately');\n\n  setTimeout(() => {\n    assert.equal(calledCount, 0, 'throttle method was not called in next tick');\n    bb.throttle(throttled, 10, false);\n  }, 0);\n\n  setTimeout(() => {\n    assert.equal(calledCount, 1, 'throttle method was was only called once');\n    assert.deepEqual(calledWith, [ [] ], 'throttle method was called with the correct arguments');\n    done();\n  }, 20);\n});\n\nQUnit.test('throttle without a target, without args, not immediate - can be canceled', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n\n  let fooCalledCount = 0;\n  let barCalledCount = 0;\n  function foo() {\n    fooCalledCount++;\n  }\n  function bar() {\n    barCalledCount++;\n  }\n\n  bb.throttle(foo, 10, false);\n  bb.throttle(foo, 10, false);\n  assert.equal(fooCalledCount, 0, 'foo was not called immediately');\n\n  bb.throttle(bar, 10, false);\n  let timer = bb.throttle(bar, 10, false);\n  assert.equal(barCalledCount, 0, 'bar was not called immediately');\n\n  setTimeout(() => {\n    assert.equal(fooCalledCount, 0, 'foo was not called within the time window');\n    assert.equal(barCalledCount, 0, 'bar was not called within the time window');\n\n    bb.cancel(timer);\n  }, 0);\n\n  setTimeout(() => {\n    assert.equal(fooCalledCount, 1, 'foo ran');\n    assert.equal(barCalledCount, 0, 'bar was properly canceled');\n\n    bb.throttle(bar, 10, false);\n\n    setTimeout(() => {\n      assert.equal(barCalledCount, 1, 'bar was able to run after being canceled');\n      done();\n    }, 20);\n  }, 20);\n});\n\nQUnit.test('throttle without a target, with args', function(assert) {\n  let bb = new Backburner(['batman']);\n  let calledWith: string[] = [];\n  function throttled(first) {\n    calledWith.push(first);\n  }\n\n  let foo = { isFoo: true };\n  let bar = { isBar: true };\n  let baz = { isBaz: true };\n  bb.throttle(throttled, foo, 10);\n  bb.throttle(throttled, bar, 10);\n  bb.throttle(throttled, baz, 10);\n\n  assert.deepEqual(calledWith, [{ isFoo: true }], 'throttle method was only called once, with correct argument');\n});\n\nQUnit.test('throttle without a target, with args - can be canceled', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith: string[] = [];\n  function throttled(first) {\n    calledCount++;\n    calledWith.push(first);\n  }\n\n  let foo = { isFoo: true };\n  let bar = { isBar: true };\n  let baz = { isBaz: true };\n  let qux = { isQux: true };\n  bb.throttle(throttled, foo, 10);\n  bb.throttle(throttled, bar, 10);\n  let timer = bb.throttle(throttled, baz, 10);\n\n  assert.deepEqual(calledWith, [{ isFoo: true }], 'throttle method was only called once, with correct argument');\n\n  setTimeout(() => {\n    bb.cancel(timer);\n    bb.throttle(throttled, qux, 10, true);\n    assert.deepEqual(calledWith, [{ isFoo: true }, { isQux: true }], 'throttle method was called again after canceling prior timer');\n  }, 0);\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [{ isFoo: true }, { isQux: true }], 'throttle method was not called again');\n    done();\n  }, 20);\n});\n\nQUnit.test('throttle without a target, with args, not immediate', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledWith: string[] = [];\n  function throttler(first) {\n    calledWith.push(first);\n  }\n\n  let foo = { isFoo: true };\n  let bar = { isBar: true };\n  let baz = { isBaz: true };\n  bb.throttle(throttler, foo, 10, false);\n  bb.throttle(throttler, bar, 10, false);\n  bb.throttle(throttler, baz, 10, false);\n  assert.deepEqual(calledWith, [], 'throttler was not called immediately');\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [{ isBaz: true }], 'debounce method was only called once, with correct argument');\n    done();\n  }, 20);\n});\n\nQUnit.test('throttle without a target, with args, not immediate - can be canceled', function(assert) {\n  let done = assert.async();\n  let bb = new Backburner(['batman']);\n  let calledCount = 0;\n  let calledWith: string[] = [];\n  function throttled(first) {\n    calledCount++;\n    calledWith.push(first);\n  }\n\n  let foo = { isFoo: true };\n  let bar = { isBar: true };\n  let baz = { isBaz: true };\n  bb.throttle(throttled, foo, 10, false);\n  bb.throttle(throttled, bar, 10, false);\n  let timer = bb.throttle(throttled, baz, 10, false);\n  assert.equal(calledCount, 0, 'throttle method was not called immediately');\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [], 'throttle method has not been called on next tick');\n    bb.cancel(timer);\n  }, 0);\n\n  setTimeout(() => {\n    assert.deepEqual(calledWith, [], 'throttle method is not called when canceled');\n    done();\n  }, 20);\n});\n\nQUnit.test('onError', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.throttle(null, () => {\n    throw new Error('test error');\n  }, 20);\n});\n\nQUnit.test('throttle + immediate joins existing run loop instances', function(assert) {\n  assert.expect(1);\n\n  function onError(error) {\n    assert.equal('test error', error.message);\n  }\n\n  let bb = new Backburner(['errors'], {\n    onError: onError\n  });\n\n  bb.run(() => {\n    let parentInstance = bb.currentInstance;\n    bb.throttle(null, () => {\n     assert.equal(bb.currentInstance, parentInstance);\n    }, 20, true);\n  });\n});\n\nQUnit.test('when [callback, string] args passed', function(assert) {\n  assert.expect(2);\n\n  let bb = new Backburner(['one']);\n  let functionWasCalled = false;\n\n  bb.run(() => {\n    bb.throttle(function(name) {\n      assert.equal(name, 'batman');\n      functionWasCalled = true;\n    }, 'batman', 200);\n  });\n\n  assert.ok(functionWasCalled, 'function was called');\n});\n"],"names":["let","Backburner","buildPlatform","const","originalDateValueOf"],"mappings":"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"}